"""Initial migration

Revision ID: 81779120f64e
Revises: 
Create Date: 2025-02-18 00:17:05.596126

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '81779120f64e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('commodity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trader',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('trader_type', postgresql.ENUM('elf', 'wizard', 'dwarf', name='tradertype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('commodity_property',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('property_name', postgresql.ENUM('color', 'material', 'size', name='commoditypropertytype'), nullable=False),
    sa.Column('property_value', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('traded_from', sa.Integer(), nullable=True),
    sa.Column('traded_to', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'rejected', 'reversed', name='tradestatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['traded_from'], ['trader.id'], ),
    sa.ForeignKeyConstraint(['traded_to'], ['trader.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade_rule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rule_name', sa.String(length=100), nullable=False),
    sa.Column('trader_id', sa.Integer(), nullable=True),
    sa.Column('condition', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['trader_id'], ['trader.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trader_inventory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trader_id', sa.Integer(), nullable=True),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ),
    sa.ForeignKeyConstraint(['trader_id'], ['trader.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reverse_trade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('original_trade_id', sa.Integer(), nullable=True),
    sa.Column('reverse_reason', sa.Text(), nullable=False),
    sa.Column('trade_reversed_by', sa.Integer(), nullable=True),
    sa.Column('penalty', sa.Float(), nullable=True),
    sa.Column('reversed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['original_trade_id'], ['trade.id'], ),
    sa.ForeignKeyConstraint(['trade_reversed_by'], ['trader.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade_audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trade_id', sa.Integer(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_details', sa.Text(), nullable=True),
    sa.Column('triggered_by', sa.Integer(), nullable=True),
    sa.Column('event_timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], ),
    sa.ForeignKeyConstraint(['triggered_by'], ['trader.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade_commodity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trade_id', sa.Integer(), nullable=True),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    op.execute("DROP MATERIALIZED VIEW IF EXISTS trade_acceptance_rate CASCADE;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS market_conversion_rates CASCADE;")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trade_audit_log')
    op.drop_table('reverse_trade')
    op.drop_table('trade_commodity')  # Drop child table before parent
    op.drop_table('trade')
    op.drop_table('trader_inventory')
    op.drop_table('trade_rule')
    op.drop_table('commodity_property')
    op.drop_table('commodity')
    op.drop_table('trader')
    # ### end Alembic commands ###
